import pandas as pd
import dash
import dash_html_components as html
import dash_core_components as dcc
from dash.dependencies import Input, Output
import plotly.express as px

# Cargar el conjunto de datos
spacex_df = pd.read_csv("spacex_launch_dash.csv")

# Determinar la carga útil máxima y mínima
max_payload = spacex_df['Payload Mass (kg)'].max()
min_payload = spacex_df['Payload Mass (kg)'].min()

# Inicializar la aplicación Dash
app = dash.Dash(__name__)
server = app.server

# Crear opciones para el menú desplegable de sitios de lanzamiento
lsites = [{'label': 'All Sites', 'value': 'All Sites'}] + [
    {'label': site, 'value': site} for site in spacex_df['Launch Site'].unique()
]

# Diseñar el layout de la aplicación
app.layout = html.Div(children=[
    html.H1('SpaceX Launch Records Dashboard',
            style={'textAlign': 'center', 'color': '#503D36', 'font-size': '40px'}),

    # Dropdown para seleccionar el sitio de lanzamiento
    dcc.Dropdown(
        id='site_dropdown',
        options=lsites,
        placeholder='Select a Launch Site',
        searchable=True,
        value='All Sites',
        style={'width': '80%', 'margin': 'auto'}
    ),
    html.Br(),

    # Gráfico circular para el éxito de los lanzamientos
    html.Div(dcc.Graph(id='success-pie-chart'), style={'margin': '20px'}),
    html.Br(),

    # Slider para el rango de la carga útil
    html.P("Payload range (Kg):", style={'font-size': '20px', 'textAlign': 'center'}),
    dcc.RangeSlider(
        id='payload_slider',
        min=0,
        max=10000,
        step=1000,
        marks={i: f'{i} kg' for i in range(0, 11000, 1000)},
        value=[min_payload, max_payload]
    ),
    html.Br(),

    # Gráfico de dispersión para la relación entre carga útil y éxito
    html.Div(dcc.Graph(id='success-payload-scatter-chart'), style={'margin': '20px'}),
])

# Callback para actualizar el gráfico circular
@app.callback(
    Output(component_id='success-pie-chart', component_property='figure'),
    Input(component_id='site_dropdown', component_property='value')
)
def update_pie_chart(site_dropdown):
    if site_dropdown == 'All Sites':
        df = spacex_df[spacex_df['class'] == 1]
        fig = px.pie(
            df, names='Launch Site', hole=0.3,
            title='Total Success Launches By All Sites'
        )
    else:
        df = spacex_df[spacex_df['Launch Site'] == site_dropdown]
        fig = px.pie(
            df, names='class', hole=0.3,
            title=f'Total Success Launches for site {site_dropdown}'
        )
    return fig

# Callback para actualizar el gráfico de dispersión
@app.callback(
    Output(component_id='success-payload-scatter-chart', component_property='figure'),
    [Input(component_id='site_dropdown', component_property='value'),
     Input(component_id='payload_slider', component_property='value')]
)
def update_scatter_chart(site_dropdown, payload_slider):
    low, high = payload_slider
    if site_dropdown == 'All Sites':
        df = spacex_df
    else:
        df = spacex_df[spacex_df['Launch Site'] == site_dropdown]
    
    mask = (df['Payload Mass (kg)'] > low) & (df['Payload Mass (kg)'] < high)
    filtered_df = df[mask]
    
    # Verificar si hay datos filtrados
    if filtered_df.empty:
        return px.scatter(title="No data available for the selected range")
    
    fig = px.scatter(
        filtered_df, x='Payload Mass (kg)', y='class',
        color='Booster Version', size='Payload Mass (kg)',
        hover_data=['Payload Mass (kg)'],
        title='Correlation Between Payload and Success'
    )
    return fig

# Ejecutar la aplicación
if __name__ == '__main__':
    app.run_server(debug=False)
